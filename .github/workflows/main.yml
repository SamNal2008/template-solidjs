# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "MASTER_BRANCH" ]
  pull_request:
    branches: [ "MASTER_BRANCH" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment you want to deploy'
        required: true
        default: 'develop'
        type: choice
        options:
          - develop
          - staging
          - production

# List of job that will be executed
jobs:
  infra:
    name: 'Setup S3 with Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash
        working-directory: infra
    outputs:
      bucket_name: ${{ steps.export-bucket.outputs.bucket_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: terraform init
        run: terraform init
      - name: Write env file
        run: echo "access_key = \"$AWS_ACCESS_KEY_ID\""  >> env.tfvars && echo -n "secret_key = \"$AWS_SECRET_ACCESS_KEY\"" >> env.tfvars
      - name: Terraform Format
        run: terraform fmt -check
      - name: Terraform Plan
        run: terraform plan -input=false -var-file env.tfvars
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file env.tfvars
      - name: Export Bucket name
        id: export-bucket
        run: echo "::set-output name=bucket_name::$(terraform output BUCKET_NAME)"

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name}}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies and save it in `.npm` file
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: echo 'Need to install dependencies' && npm ci --cache ~/.npm
      - name: Test
        run: make test


  build:
    needs: [ test ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Write building environment
        run: echo Lets build the ${{ github.event.inputs.environment }} artifact !
      - name: Install dependencies and save it in `.npm` file
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: echo 'Need to install dependencies' && npm ci --cache ~/.npm
      - name: Write env file
        run: |
          echo "VITE_API_URL = ${{ secrets.VITE_API_URL }}" >> .env.production
          echo "VITE_FILE_PATH = ${{ secrets.VITE_FILE_PATH }}" >> .env.production
      - name: Build the website
        run: npm run build
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist/
          retention-days: 1

  upload-on-s3:
    needs: [ build, infra ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
      - uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: ${{ needs.infra.outputs.bucket_name }} # ${{ secrets.AWS_S3_BUCKET }} # from output
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}   # optional: defaults to us-east-1
